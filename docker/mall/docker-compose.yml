version: '3.5'

networks:
  backend:
    driver: ${NETWORKS_DRIVER}

services:
  golang:                                # 自定义容器名称
    build:
      context: ./golang                  # 指定构建使用的 Dockerfile 文件
    image: go1.18
    container_name: go1.18
    environment:
      - TZ=${TZ}
      - LANG=C.UTF-8
    volumes:
      - /home/uos/dde-go/src:/usr/src
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - backend

  etcd1:
    image: bitnami/etcd
    container_name: etcd1
    networks:
      - backend
    ports:
      - "23791:2379"
      - "23801:2380"
    environment:
      - TZ:${TZ}
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_NAME=etcd1
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd1:2380
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd1:2380
      - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster             # 在启动期间用于 etcd 集群的初始化集群记号
      - ETCD_INITIAL_CLUSTER=etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380 # 为启动初始化集群配置
      - ETCD_INITIAL_CLUSTER_STATE=new                      # 初始化集群状态
  
  etcd2:
    image: bitnami/etcd
    container_name: etcd2
    networks:
      - backend
    ports:
      - "23792:2379"
      - "23802:2380"
    environment:
      - TZ=${TZ}
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_NAME=etcd2
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd2:2380
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd2:2380
      - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster             # 在启动期间用于 etcd 集群的初始化集群记号
      - ETCD_INITIAL_CLUSTER=etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380 # 为启动初始化集群配置
      - ETCD_INITIAL_CLUSTER_STATE=new                      # 初始化集群状态

  etcd3:
    image: bitnami/etcd
    container_name: etcd3
    networks:
      - backend
    ports:
      - "23793:2379"
      - "23803:2380"
    environment:
      - TZ=${TZ}
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_NAME=etcd3
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd3:2380
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd3:2380
      - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster             # 在启动期间用于 etcd 集群的初始化集群记号
      - ETCD_INITIAL_CLUSTER=etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380 # 为启动初始化集群配置
      - ETCD_INITIAL_CLUSTER_STATE=new                      # 初始化集群状态

  etcd_web:
    image: evildecay/etcdkeeper
    container_name: etcd_web
    networks:
      - backend
    depends_on:
      - etcd1
      - etcd2
      - etcd3
    environment:
      - TZ=${TZ}
      - HOST=etcd_web
    ports:
      - "8091:8080"

  db:
    image: mysql
    hostname: "mysql"
    container_name: "mysql"
    ports:
      - "53306:3306"
    environment:
      - TZ=${TZ}
      - MYSQL_ROOT_PASSWORD=123456
    volumes:
      - ./data/mysql/conf:/etc/mysql/conf.d
      - ./data/mysql/data:/var/lib/mysql
    networks:
      - backend
    
  cache:
    build: ./redis
    hostname: "redis"
    container_name: "redis"
    environment:
      - TZ=${TZ}   
    ports:
      - "56379:6379"
    volumes:
      - ./data/redis/data:/data
      - ./data/redis:/etc/redis
    command: /bin/bash -c "redis-server /etc/redis/redis.conf"
    networks:
      - backend

  userrpc:
    build: ./user/rpc
    container_name: "userrpc"
    hostname: "userrpc"
    environment:
      - TZ=${TZ}
    ports:
      - "9000:9000"
    networks:
      - backend

  userapi:
    build: ./user/api
    container_name: "userapi"
    hostname: "userapi"
    environment:
      - TZ=${TZ}    
    depends_on:
      - "userrpc"
    ports:
      - "8000:8000"
    networks:
      - backend

  productrpc:
    build: ./product/rpc
    container_name: "productrpc"
    hostname: "productrpc"
    environment:
      - TZ=${TZ}    
    ports:
      - "9001:9001"
    networks:
      - backend

  productapi:
    build: ./product/api
    container_name: "productapi"
    hostname: "productapi"
    environment:
      - TZ=${TZ}    
    depends_on:
      - "productrpc"
    ports:
      - "8001:8001"
    networks:
      - backend
    
  orderrpc:
    build: ./order/rpc
    container_name: "orderrpc"
    hostname: "orderrpc"
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    environment:
      - TZ=${TZ}    
    volumes:
      - /home/uos/dde-go/src:/usr/src
    ports:
      - "9002:9002"
    networks:
      - backend

  orderapi:
    build: ./order/api
    container_name: "orderapi"
    hostname: "orderapi"
    environment:
      - TZ=${TZ}    
    depends_on:
      - "orderrpc"
    volumes:
      - /home/uos/dde-go/src:/usr/src
    ports:
      - "8002:8002"
    networks:
      - backend

  payrpc:
    build: ./pay/rpc
    container_name: "payrpc"
    hostname: "payrpc"
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    volumes:
      - /home/uos/dde-go/src:/usr/src
    environment:
      - TZ=${TZ}    
    ports:
      - "9003:9003"
    networks:
      - backend

  payapi:
    build: ./pay/api
    container_name: "payapi"
    hostname: "payapi"
    environment:
      - TZ=${TZ}    
    depends_on:
      - "payrpc"
    ports:
      - "8003:8003"
    networks:
      - backend
  
  prometheus:
    build: ./prometheus
    container_name: "prometheus"
    hostname: prometheus
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ./prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml  # 将 prometheus 配置文件挂载到容器里
    ports:
      - "${PROMETHEUS_PORT}:9090"                     # 设置容器9090端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always
  
  grafana:
    build:
      context: ./grafana
    environment:
      - TZ=${TZ}
    ports:
      - "${GRAFANA_PORT}:3000"                        # 设置容器3000端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always

  jaeger:
    build:
      context: ./jaeger
    environment:
      - TZ=${TZ}
    ports:
      - "${JAEGER_PORT}:16686"                        # 设置容器16686端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always
    
  dtm:
    build:
      context: ./dtm
    environment:
      - TZ=${TZ}
    entrypoint:
      - "/app/dtm/dtm"
      - "-c=/app/dtm/configs/config.yaml"
    privileged: true
    volumes:
      - ./dtm/config.yml:/app/dtm/configs/config.yaml # 将 dtm 配置文件挂载到容器里
    ports:
      - "${DTM_HTTP_PORT}:36789"
      - "${DTM_GRPC_PORT}:36790"
    networks:
      - backend
    restart: always